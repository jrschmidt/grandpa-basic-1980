// Generated by CoffeeScript 1.7.1
describe("Test boolean expression parser", function() {
  beforeEach(function() {
    return this.parser = new BooleanExpressionParser;
  });
  it("should create a BooleanExpressionParser object", function() {
    expect(this.parser).toBeDefined;
    return expect(this.parser).toEqual(jasmine.any(BooleanExpressionParser));
  });
  it("should split and tokenize a boolean expression string", function() {
    var str, tokens;
    str = '$Y="Y"';
    tokens = this.parser.split(str);
    expect(tokens).toEqual(jasmine.any(Array));
    expect(tokens[0]).toEqual("$Y");
    expect(tokens[1]).toEqual("<equals>");
    expect(tokens[2]).toEqual('"Y"');
    str = 'N>0';
    tokens = this.parser.split(str);
    expect(tokens).toEqual(jasmine.any(Array));
    expect(tokens[0]).toEqual("N");
    expect(tokens[1]).toEqual("<greater_than>");
    expect(tokens[2]).toEqual("0");
    str = 'I3<20';
    tokens = this.parser.split(str);
    expect(tokens).toEqual(jasmine.any(Array));
    expect(tokens[0]).toEqual("I3");
    expect(tokens[1]).toEqual("<lesser_than>");
    expect(tokens[2]).toEqual("20");
    str = 'Z=A';
    tokens = this.parser.split(str);
    expect(tokens).toEqual(jasmine.any(Array));
    expect(tokens[0]).toEqual("Z");
    expect(tokens[1]).toEqual("<equals>");
    expect(tokens[2]).toEqual("A");
    str = 'Q1<>Q2';
    tokens = this.parser.split(str);
    expect(tokens).toEqual(jasmine.any(Array));
    expect(tokens[0]).toEqual("Q1");
    expect(tokens[1]).toEqual("<not_equal>");
    expect(tokens[2]).toEqual("Q2");
    str = 'T<=30';
    tokens = this.parser.split(str);
    expect(tokens).toEqual(jasmine.any(Array));
    expect(tokens[0]).toEqual("T");
    expect(tokens[1]).toEqual("<lesser_equal>");
    expect(tokens[2]).toEqual("30");
    str = 'H>=H0';
    tokens = this.parser.split(str);
    expect(tokens).toEqual(jasmine.any(Array));
    expect(tokens[0]).toEqual("H");
    expect(tokens[1]).toEqual("<greater_equal>");
    return expect(tokens[2]).toEqual("H0");
  });
  xit("should return a 'not a boolean expression' token for any string that won't parse into a boolean expression", function() {
    var result;
    result = this.parser.boolean_parse('');
    return expect(result).toEqual("<not_a_boolean_expression>");
  });
  return xit("should parse any properly formed boolean expression", function() {
    var po;
    po = this.parser.boolean_parse('');
    expect(po).toEqual(jasmine.any(Array));
    expect(po[0]).toEqual("");
    expect(po[1]).toEqual("");
    expect(po[2]).toEqual("");
    expect(po[3]).toEqual("");
    return expect(po[4]).toEqual("");
  });
});
