// Generated by CoffeeScript 1.7.1
describe("Numeric expression evaluator", function() {
  it("should create a NumericExpressionEvaluator object", function() {
    var nmx_eval;
    nmx_eval = new NumericExpressionEvaluator;
    return expect(nmx_eval).toEqual(jasmine.any(NumericExpressionEvaluator));
  });
  beforeEach(function() {
    this.nmx_eval = new NumericExpressionEvaluator;
    return this.num_vars = this.nmx_eval.vars;
  });
  it("should evaluate a numeric literal", function() {
    var nmx, value;
    nmx = {
      exp: "<num>",
      value: 42
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(42);
    nmx = {
      exp: "<num>",
      value: 0
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(0);
    nmx = {
      exp: "<num>",
      value: 6
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(6);
    nmx = {
      exp: "<num>",
      value: 3.1416
    };
    value = this.nmx_eval.val(nmx);
    return expect(value).toEqual(3.1416);
  });
  it("should evaluate a reference to a number variable", function() {
    var nmx, value;
    nmx = {
      exp: "<var>",
      name: "Y"
    };
    this.num_vars.set("Y", 7);
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(7);
    nmx = {
      exp: "<var>",
      name: "A8"
    };
    this.num_vars.set("A8", 0);
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(0);
    nmx = {
      exp: "<var>",
      name: "E"
    };
    this.num_vars.set("E", 944.67);
    value = this.nmx_eval.val(nmx);
    return expect(value).toEqual(944.67);
  });
  it("should evaluate a simple binary expression", function() {
    var nmx, value;
    nmx = {
      exp: "<plus>",
      op1: 440,
      op2: 16
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(456);
    nmx = {
      exp: "<minus>",
      op1: 888,
      op2: 555
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(333);
    nmx = {
      exp: "<times>",
      op1: 3,
      op2: 17
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(51);
    nmx = {
      exp: "<divide>",
      op1: 1024,
      op2: 256
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual(4);
    nmx = {
      exp: "<power>",
      op1: 2,
      op2: 5
    };
    value = this.nmx_eval.val(nmx);
    return expect(value).toEqual(32);
  });
  return xit("should do nothing ...", function() {
    var nmx, value;
    nmx = {
      exp: "<>"
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual();
    nmx = {
      exp: "<>"
    };
    value = this.nmx_eval.val(nmx);
    expect(value).toEqual();
    nmx = {
      exp: "<>"
    };
    value = this.nmx_eval.val(nmx);
    return expect(value).toEqual();
  });
});
