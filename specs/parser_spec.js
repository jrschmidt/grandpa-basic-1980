// Generated by CoffeeScript 1.7.1
describe("Test Basic program line parser", function() {
  beforeEach(function() {
    return this.parser = new LineParser;
  });
  describe("Test line parser object", function() {
    return it("should create a LineParser object", function() {
      expect(this.parser).toBeDefined;
      return expect(this.parser).toEqual(jasmine.any(LineParser));
    });
  });
  describe("Test command parsing", function() {
    return it("should correctly parse a terminal command", function() {
      var po;
      po = this.parser.parse("CLEAR");
      expect(po).toEqual(jasmine.any(Array));
      expect(po.length).toEqual(1);
      expect(po[0]).toEqual("<clear>");
      po = this.parser.parse("RUN");
      expect(po).toEqual(jasmine.any(Array));
      expect(po.length).toEqual(1);
      expect(po[0]).toEqual("<run>");
      po = this.parser.parse("INFO");
      expect(po).toEqual(jasmine.any(Array));
      expect(po.length).toEqual(1);
      expect(po[0]).toEqual("<info>");
      po = this.parser.parse("LIST");
      expect(po).toEqual(jasmine.any(Array));
      expect(po.length).toEqual(1);
      return expect(po[0]).toEqual("<list>");
    });
  });
  xdescribe("Test line number parsing", function() {
    return it("should correctly parse line numbers", function() {
      var po;
      po = this.parser.parse('10 REM WELCOME TO GRANDPA BASIC 80');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(10);
      po = this.parser.parse('20 $T = "JOHN R SCHMIDT"');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(20);
      po = this.parser.parse('30 INPUT "DISPLAY NAME (Y/N)?";$Y');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(30);
      po = this.parser.parse('40 IF $Y<>"Y" THEN 100');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(40);
      po = this.parser.parse('50 PRINT "WRITTEN BY "+$T');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(50);
      po = this.parser.parse('100 PRINT "OK BYE"');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(100);
      po = this.parser.parse('999 END');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      return expect(po[1]).toEqual(999);
    });
  });
  return describe("Test numeric assignment parsing", function() {
    it("should correctly parse a numeric assignment statement", function() {
      var po;
      po = this.parser.parse('180 X=77');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(180);
      expect(po[2]).toEqual("<numeric_identifier>");
      expect(po[3]).toEqual("X");
      expect(po[4]).toEqual("<equals_sign>");
      expect(po[5]).toEqual("<numeric_expression>");
      po = this.parser.parse('320 K5=K2*K3+(2*K4)');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(320);
      expect(po[2]).toEqual("<numeric_identifier>");
      expect(po[3]).toEqual("K5");
      expect(po[4]).toEqual("<equals_sign>");
      expect(po[5]).toEqual("<numeric_expression>");
      po = this.parser.parse('660 R=1+(B^2-4*A*C)/(2*A)');
      expect(po).toEqual(jasmine.any(Array));
      expect(po[0]).toEqual("<line_number>");
      expect(po[1]).toEqual(660);
      expect(po[2]).toEqual("<numeric_identifier>");
      expect(po[3]).toEqual("R");
      expect(po[4]).toEqual("<equals_sign>");
      return expect(po[5]).toEqual("<numeric_expression>");
    });
    return xit("should flag any string that doesn't parse into a numeric expression after the equals sign", function() {
      var po;
      po = this.parser.parse('110 Q="33-7"');
      expect(po).toEqual("<not_a_numeric_expression>");
      po = this.parser.parse('404 V6=180-45DEGREES');
      expect(po).toEqual("<not_a_numeric_expression>");
      po = this.parser.parse('470 X5="NOTHING PARSEABLE AS A NUMERIC EXPRESSION"');
      expect(po).toEqual("<not_a_numeric_expression>");
      po = this.parser.parse('590 Q=2*PI');
      expect(po).toEqual("<not_a_numeric_expression>");
      po = this.parser.parse('740 J2=22,348,507');
      return expect(po).toEqual("<not_a_numeric_expression>");
    });
  });
});
