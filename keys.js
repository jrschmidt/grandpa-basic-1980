// Generated by CoffeeScript 1.7.1
var BasicConsole, ConsoleLineBuffer, KeyHelper, KeyTalker, start,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

KeyTalker = (function() {
  function KeyTalker() {
    this.console = new BasicConsole;
    this.keys = this.console.keys;
    this.buffer = this.console.buffer;
  }

  KeyTalker.prototype.handle = function(ch_num, ch_key) {
    if (ch_num > 0) {
      return this.console.ch(this.keys.char(ch_num));
    } else {
      if (ch_key === 13) {
        this.console.enter_line();
      }
      if (ch_key === 8) {
        return this.console.backspace();
      }
    }
  };

  return KeyTalker;

})();

BasicConsole = (function() {
  function BasicConsole() {
    this.console_height = 23;
    this.sprites = document.getElementById("chars");
    this.keys = new KeyHelper;
    this.buffer = new ConsoleLineBuffer(this);
    this.canvas = document.getElementById('canvas');
    this.context = this.canvas.getContext('2d');
    this.scroll = [];
    this.line = 0;
    this.column = 0;
  }

  BasicConsole.prototype.enter_line = function() {
    console.log("ENTER LINE called");
    if (this.buffer.length > 0) {
      console.log("buffer = " + this.buffer.chars);
      this.scroll_line(this.buffer_chars);
      return this.buffer.clear();
    }
  };

  BasicConsole.prototype.print = function(string) {
    var ch, _i, _len;
    for (_i = 0, _len = string.length; _i < _len; _i++) {
      ch = string[_i];
      this.ch(ch);
    }
    return this.line_text = string;
  };

  BasicConsole.prototype.scroll_line = function(string) {
    this.column = 0;
    this.scroll.push(string);
    if (this.line < this.console_height) {
      this.line = this.line + 1;
    }
    if (this.scroll.length > this.console_height) {
      return this.scroll.shift();
    }
  };

  BasicConsole.prototype.println = function(string) {
    console.log("PRINTLN: " + string);
    this.print(string);
    return this.scroll_line(string);
  };

  BasicConsole.prototype.ch = function(ch) {
    this.column = this.column + 1;
    if (this.column < 80) {
      return this.ch_ln_col(ch, this.line, this.column);
    }
  };

  BasicConsole.prototype.ch_ln_col = function(ch, line, col) {
    var sprite;
    this.line_text = "" + ch + " [" + line + "," + col + "]";
    console.log("draw " + ch + " at line " + line + ", col " + col);
    if (ch !== " ") {
      sprite = this.keys.sprite_xy(ch);
      return this.context.drawImage(this.sprites, sprite[0], sprite[1], 11, 18, col * 11, line * 18, 11, 18);
    }
  };

  BasicConsole.prototype.backspace = function() {
    return console.log("BACKSPACE called");
  };

  BasicConsole.prototype.clear = function() {
    this.scroll = [];
    this.line_text = "";
    return this.context.clearRect(0, 0, 1200, 400);
  };

  return BasicConsole;

})();

ConsoleLineBuffer = (function() {
  function ConsoleLineBuffer(gb_console) {
    this.console = gb_console;
    this.chars = "";
  }

  ConsoleLineBuffer.prototype.add = function(ch) {
    return this.chars = this.chars + ch;
  };

  ConsoleLineBuffer.prototype.clear = function() {
    return this.chars = "";
  };

  ConsoleLineBuffer.prototype.print = function() {
    this.console.println(this.chars);
    return this.chars = "";
  };

  return ConsoleLineBuffer;

})();

KeyHelper = (function() {
  function KeyHelper() {
    this.code = [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126];
    this.chars = ["!", '"', "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", "?", "@", "^", "_", "`", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "{", "|", "}", "~"];
    this.xy = [[99, 72], [33, 72], [33, 90], [77, 72], [88, 72], [44, 90], [22, 72], [66, 54], [77, 54], [33, 54], [11, 54], [55, 72], [22, 54], [44, 72], [44, 54], [0, 36], [11, 36], [22, 36], [33, 36], [44, 36], [55, 36], [66, 36], [77, 36], [88, 36], [99, 36], [0, 72], [11, 72], [88, 54], [0, 54], [99, 54], [66, 72], [22, 90], [55, 54], [55, 90], [0, 90], [0, 0], [11, 0], [22, 0], [33, 0], [44, 0], [55, 0], [66, 0], [77, 0], [88, 0], [99, 0], [110, 0], [121, 0], [132, 0], [0, 18], [11, 18], [22, 18], [33, 18], [44, 18], [55, 18], [66, 18], [77, 18], [88, 18], [99, 18], [110, 18], [121, 18], [132, 18], [66, 90], [99, 90], [77, 90], [11, 90]];
  }

  KeyHelper.prototype.char = function(n) {
    var ch, i, _i, _results;
    if (__indexOf.call((function() {
      _results = [];
      for (_i = 65; _i <= 90; _i++){ _results.push(_i); }
      return _results;
    }).apply(this), n) >= 0) {
      n = n + 32;
    }
    if (__indexOf.call(this.code, n) >= 0) {
      i = this.code.indexOf(n);
      ch = this.chars[i];
    } else {
      if (n === 32) {
        ch = " ";
      } else {
        ch = null;
      }
    }
    return ch;
  };

  KeyHelper.prototype.sprite_xy = function(ch) {
    var i;
    if (__indexOf.call(this.chars, ch) >= 0) {
      i = this.chars.indexOf(ch);
      return this.xy[i];
    }
  };

  return KeyHelper;

})();

this.keyevent = function(e) {
  var ch_key, ch_num;
  if (this.disable_key_defaults) {
    e.preventDefault();
  }
  ch_num = e.charCode;
  ch_key = e.keyCode;
  console.log("key: " + ch_key + " char: " + ch_num);
  return this.app.handle(ch_num, ch_key);
};

start = function() {
  this.canvas = document.getElementById("canvas");
  this.canvas.setAttribute('tabindex', '0');
  this.canvas.focus();
  this.disable_key_defaults = true;
  return this.app = new KeyTalker;
};

window.onload = start;
