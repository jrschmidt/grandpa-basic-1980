// Generated by CoffeeScript 1.7.1
xdescribe("Boolean expression evaluator", function() {
  beforeEach(function() {
    var hh;
    this.num_vars = new NumericVariableRegister;
    this.str_vars = new StringVariableRegister;
    this.str_eval = new StringExpressionConcatenator({
      str_vars: this.str_vars
    });
    this.num_eval = new NumericExpressionEvaluator({
      num_vars: this.num_vars
    });
    hh = {
      str_vars: this.str_vars,
      num_vars: this.num_vars,
      str_eval: this.str_eval,
      num_eval: this.num_eval
    };
    return this.bx_eval = new BooleanExpressionEvaluator(hh);
  });
  return it("should calculate the value of a boolean expression", function() {
    var bx, op1, op2, tf;
    bx = {
      exp: "<num_lesser_than>",
      "var": "Z",
      num_exp: {
        exp: "<num>",
        value: 0
      }
    };
    this.num_vars.set("Z", -7);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("Z", 49.208);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    bx = {
      exp: "<str_equals>",
      "var": "W",
      str_exp: [["<str>", "TOMORROW"]]
    };
    this.str_vars.set("W", "TOMORROW");
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.str_vars.set("W", "YESTERDAY");
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    bx = {
      exp: "<num_greater_equal>",
      "var": "N",
      num_exp: {
        exp: "<num>",
        value: 20
      }
    };
    this.num_vars.set("N", 206);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("N", 20);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("N", 6);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    bx = {
      exp: "<num_equals>",
      "var": "Q",
      num_exp: {
        exp: "<num>",
        value: 7
      }
    };
    this.num_vars.set("Q", 7);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("Q", 3);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    this.num_vars.set("Q", 47);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    bx = {
      exp: "<num_greater_than>",
      "var": "L4",
      num_exp: {
        exp: "<var>",
        name: "L5"
      }
    };
    this.num_vars.set("L4", 1677);
    this.num_vars.set("L5", 1340);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("L4", 1340);
    this.num_vars.set("L5", 1677);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    op1 = {
      exp: "<var>",
      name: "P"
    };
    op2 = {
      exp: "<num>",
      value: 4
    };
    bx = {
      exp: "<num_lesser_equal>",
      "var": "V",
      num_exp: {
        exp: "<plus>",
        op1: op1,
        op2: op2
      }
    };
    this.num_vars.set("V", 15);
    this.num_vars.set("P", 5);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    this.num_vars.set("P", 15);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("P", 25);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    bx = {
      exp: "<str_not_equal>",
      "var": "H",
      str_exp: [["<str>", "YES"]]
    };
    this.str_vars.set("H", "NO");
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.str_vars.set("H", "YES");
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(false);
    bx = {
      exp: "<num_not_equal>",
      "var": "A",
      num_exp: {
        exp: "<var>",
        name: "B"
      }
    };
    this.num_vars.set("A", 99);
    this.num_vars.set("B", 98);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("B", 2);
    tf = this.bx_eval.val(bx);
    expect(tf).toEqual(true);
    this.num_vars.set("B", 99);
    tf = this.bx_eval.val(bx);
    return expect(tf).toEqual(false);
  });
});
